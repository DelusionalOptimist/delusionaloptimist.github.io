<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ptrace on Rudraksh Pareek (DelusionalOptimist)</title><link>https://delusionaloptimist.github.io/tags/ptrace/</link><description>Recent content in ptrace on Rudraksh Pareek (DelusionalOptimist)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://delusionaloptimist.github.io/tags/ptrace/index.xml" rel="self" type="application/rss+xml"/><item><title>Userspace security</title><link>https://delusionaloptimist.github.io/posts/userspace-security/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://delusionaloptimist.github.io/posts/userspace-security/</guid><description>Introduction There are several mechanisms for protecting your workloads at runtime. However, what to use and how effective will it be is subject to the workload&amp;rsquo;s environment.
Many runtime seucrity tools use eBPF for enforcing runtime security. It is a powerful mechanism which provides deep observability by directly instrumenting the OS kernel. However, a side effect of this is the need of privileged access to workloads&amp;rsquo; underlying infrastructure.
It is also noteworthy that cloud platforms recently have started to abstract away infrastructure, hiding many configuration knobs, so that users can have a more smoother and secure experience.</description></item></channel></rss>